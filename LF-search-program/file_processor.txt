import os
from .utils import is_non_log_extension, time_limit, TimeoutException
from .entropy import calculate_file_entropy

def scan_directory(directory_path):
    """
    ディレクトリを再帰的にスキャンし、処理対象のファイルパスを収集します。
    
    Args:
        directory_path (str): スキャンするディレクトリのパス
        
    Returns:
        tuple: (有効なパスのリスト, 拡張子フィルタ数, 空ファイルフィルタ数)
    """
    valid_paths = []
    extension_filtered = 0
    empty_filtered = 0
    
    try:
        for root, _, files in os.walk(directory_path):
            for file in files:
                path = os.path.join(root, file)
                try:
                    # シンボリックリンクまたは空ファイルをスキップ
                    if os.path.islink(path) or os.path.getsize(path) == 0:
                        empty_filtered += 1
                        continue
                    
                    # 非ログ拡張子をスキップ
                    if is_non_log_extension(path):
                        extension_filtered += 1
                        continue
                        
                    valid_paths.append(path)
                except (OSError, PermissionError):
                    continue
                    
    except Exception as e:
        print(f"ディレクトリスキャンエラー: {str(e)}")
        exit(1)
    
    return valid_paths, extension_filtered, empty_filtered

def process_paths(paths):
    """
    パスのリストを処理し、ログファイルを検出します。
    
    Args:
        paths (list): ファイルパスのリスト
        
    Returns:
        int: 処理したファイル数
    """
    file_count = 0
    results = []

    for path in paths:
        try:
            with time_limit(5):
                success, entropy_rate = calculate_file_entropy(path)
                if success and entropy_rate < 2:
                    results.append(path)
                file_count += 1
        except (TimeoutException, PermissionError):
            continue

    print(f"\n検出したログファイル（{len(results)}件）：")
    for path in results:
        print(path)
    
    return file_count
